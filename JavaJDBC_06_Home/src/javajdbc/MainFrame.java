/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javajdbc;

import java.io.FileInputStream;
import java.io.IOException;
import java.util.List;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author human
 */
public class MainFrame extends javax.swing.JFrame implements ListSelectionListener {

    private Properties dbprops;
    private DAO dao;

    /**
     * Creates new form MainJFrame
     */
    public MainFrame() {
        initComponents();

        // Center screen HACK
        setLocationRelativeTo(null);

        loadProperties();
    }

    private void loadProperties() {
        dbprops = new Properties();

        try (FileInputStream fis = new FileInputStream("db.properties")) {
            dbprops.load(fis);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        String hostname = dbprops.getProperty("hostname");
        String username = dbprops.getProperty("username");
        String password = dbprops.getProperty("password");

        dao = new DAO(hostname, username, password);

        List<String> databases = dao.getDatabases();
        DefaultComboBoxModel<String> dcbm = new DefaultComboBoxModel<>(new Vector<>(databases));

        jcbDatabases.setModel(dcbm);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbShowDatabase = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jcbDatabases = new javax.swing.JComboBox<>();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlTables = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtTableData = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiProperties = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jbShowDatabase.setText("SHOW TABLES");
        jbShowDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbShowDatabaseActionPerformed(evt);
            }
        });

        jLabel1.setText("Database:");

        jSplitPane1.setDividerLocation(180);

        jlTables.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlTables.setVisibleRowCount(-1);
        jlTables.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlTablesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jlTables);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jtTableData.setAutoCreateRowSorter(true);
        jtTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtTableData.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(jtTableData);
        jtTableData.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jSplitPane1.setRightComponent(jScrollPane2);

        jmFile.setText("File");

        jmiProperties.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jmiProperties.setText("Properties");
        jmiProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPropertiesActionPerformed(evt);
            }
        });
        jmFile.add(jmiProperties);
        jmFile.add(jSeparator1);

        jmiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jmiExit.setText("Exit");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmFile.add(jmiExit);

        jMenuBar1.add(jmFile);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 809, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbDatabases, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbShowDatabase)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbShowDatabase)
                    .addComponent(jcbDatabases, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbShowDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbShowDatabaseActionPerformed

        // TODO: Fill JList with tables list from selected database.
        DefaultListModel dlm = new DefaultListModel();

        if (jcbDatabases.getSelectedIndex() >= 0) {
            String databaseName = jcbDatabases.getSelectedItem().toString();
            List<String> tablesList = dao.getTables(databaseName);

            for (String tableName : tablesList) {
                dlm.addElement(tableName);
            }
        }

        jlTables.setModel(dlm);

    }//GEN-LAST:event_jbShowDatabaseActionPerformed

    private void jlTablesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlTablesMouseClicked

        if (evt.getClickCount() >= 2) {

            if (jcbDatabases.getSelectedIndex() >= 0 && jlTables.getSelectedIndex() >= 0) {
                String databaseName = jcbDatabases.getSelectedItem().toString();
                String tableName = jlTables.getSelectedValue();

                DefaultTableModel dtm = dao.getTableDataModel(databaseName, tableName);

                jtTableData.setModel(dtm);
                ListSelectionModel rowSelMod = jtTableData.getSelectionModel();

                ListSelectionModel colSelMod = jtTableData.getColumnModel().getSelectionModel();

                TableModel tm = jtTableData.getModel();
                rowSelMod.addListSelectionListener(this);
                colSelMod.addListSelectionListener(this);
                tm.addTableModelListener(new TableModelListener() {

                    public void tableChanged(TableModelEvent tme) {
                        if (tme.getType() == TableModelEvent.UPDATE) {
                            for (int i = 0; i < jtTableData.getColumnCount(); i++) {
                                if (jtTableData.getColumnName(i).equalsIgnoreCase("id")) {
                                    String databaseName = jcbDatabases.getSelectedItem().toString();
                                    String tableName = jlTables.getSelectedValue().toString();

                                    String tName = jtTableData.getColumnName(tme.getColumn()).toString();
                                    String value = (String) jtTableData.getValueAt(tme.getFirstRow(), tme.getColumn()).toString();
                                    int id = (int) jtTableData.getValueAt(tme.getFirstRow(), i);

                                    dao.updateTable(databaseName, tableName, tName, value, id);
                                    break;
                                }
                            }
                        }
                    }
                });

            }

        }

    }//GEN-LAST:event_jlTablesMouseClicked

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed

        dispose();

    }//GEN-LAST:event_jmiExitActionPerformed

    private void jmiPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPropertiesActionPerformed

//        for (Window window : getWindows()) {
//            if (window instanceof PropertiesFrame) {
//                window.setVisible(true);
//                return;
//            }
//        }
        PropertiesFrame propertiesFrame = new PropertiesFrame(this);
        propertiesFrame.setVisible(true);

        loadProperties();

    }//GEN-LAST:event_jmiPropertiesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton jbShowDatabase;
    private javax.swing.JComboBox<String> jcbDatabases;
    private javax.swing.JList<String> jlTables;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiProperties;
    private javax.swing.JTable jtTableData;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(ListSelectionEvent e) {
        //   throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
